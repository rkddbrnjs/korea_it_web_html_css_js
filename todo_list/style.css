body {
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding-top: 50px;
  box-sizing: border-box;
  background-color: whitesmoke;
}

.container {
  width: 500px;
  background-color: white;
  padding: 30px 40px;
  border-radius: 10px;
  text-align: center;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
}
.input-area {
  display: flex;
  gap: 10px;
}
#todoInput {
  flex-grow: 1;
  outline: none;
  border: 1px solid #ddd;
  box-sizing: border-box;
  border-radius: 5px;
  padding: 12px 15px;
  font-size: 1em;
  transition: border-color 0.3s ease;
}
::placeholder {
  color: #bbb;
}
#addTodoBtn {
  padding: 12px 25px;
  font-size: 1em;
  border: none;
  border-radius: 5px;
  background-color: #4a90e2;
  color: white;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.1s ease;
}
#addTodoBtn:hover{
    background-color: #357bd8;
    transform: translateY(-2px);
}
#addTodoBtn:active{
    transform: translateY(0px);
}
#todoInput:focus {
  border-color: #4a90e2;
}
h1 {
  padding-top: 10px;
  font-size: 2.2em;
  color: blue;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 30px;
}
/* em 단위는 해당 요소의 부모의 font-size에 상대적으로 크기가 변하는거 
em을 사용하면 폰트 크기가 부모로부터 자식으로 계속해서 상속 누적
특정 구성 요소(컴포넌트) 내에서만 크기를 비례적으로 조절하고 싶을 때 유용 
*/
/* 
rem 단위는 루트 즉 html태그의 font-size에 상대적이다
rem은 항상 루트 요소의 폰트 크기를 기준으로 하므로, 중첩된 요소에서도 
크기 계산이 훨씬 예측하기 쉽고 일관적이다.
웹페이지 전체의 기본 폰트 크기를 html에서 한 번만 변경하면
rem으로 사용하는 모든 요소의 크기가 비례적으로 조정 
*/
/* 
em : 컴포넌트 내부의 요소 간 상대적인 크기, padding, margin
rem: 전역적인 폰트 크기, 주요 레이아웃 요소의 크기(width, height, padding, margin)
 */
